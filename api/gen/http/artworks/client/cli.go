// Code generated by goa v3.3.1, DO NOT EDIT.
//
// artworks HTTP client CLI support package
//
// Command:
// $ goa gen github.com/pastelnetwork/walletnode/api/design

package client

import (
	"encoding/json"
	"fmt"
	"strconv"
	"unicode/utf8"

	artworks "github.com/pastelnetwork/walletnode/api/gen/artworks"
	goa "goa.design/goa/v3/pkg"
)

// BuildRegisterPayload builds the payload for the artworks register endpoint
// from CLI flags.
func BuildRegisterPayload(artworksRegisterBody string) (*artworks.RegisterPayload, error) {
	var err error
	var body RegisterRequestBody
	{
		err = json.Unmarshal([]byte(artworksRegisterBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"artist_name\": \"Leonardo da Vinci\",\n      \"artist_pastelid\": \"jXYJud3rmrR1Sk2scvR47N4E4J5Vv48uCC6se2nzHrBRdjaKj3ybPoi1Y2VVoRqi1GnQrYKjSxQAC7NBtvtEdS\",\n      \"artist_website_url\": \"https://www.leonardodavinci.net\",\n      \"description\": \"The Mona Lisa is an oil painting by Italian artist, inventor, and writer Leonardo da Vinci. Likely completed in 1506, the piece features a portrait of a seated woman set against an imaginary landscape.\",\n      \"image_id\": 1,\n      \"issued_copies\": 1,\n      \"keywords\": \"Renaissance, sfumato, portrait\",\n      \"name\": \"Mona Lisa\",\n      \"network_fee\": 100,\n      \"series_name\": \"Famous artist\",\n      \"spendable_address\": \"PtiqRXn2VQwBjp1K8QXR2uW2w2oZ3Ns7N6j\",\n      \"youtube_url\": \"https://www.youtube.com/watch?v=0xl6Ufo4ZX0\"\n   }'")
		}
		if utf8.RuneCountInString(body.Name) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", body.Name, utf8.RuneCountInString(body.Name), 256, false))
		}
		if body.Description != nil {
			if utf8.RuneCountInString(*body.Description) > 1024 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 1024, false))
			}
		}
		if body.Keywords != nil {
			if utf8.RuneCountInString(*body.Keywords) > 256 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.keywords", *body.Keywords, utf8.RuneCountInString(*body.Keywords), 256, false))
			}
		}
		if body.SeriesName != nil {
			if utf8.RuneCountInString(*body.SeriesName) > 256 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.series_name", *body.SeriesName, utf8.RuneCountInString(*body.SeriesName), 256, false))
			}
		}
		if body.IssuedCopies < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.issued_copies", body.IssuedCopies, 1, true))
		}
		if body.IssuedCopies > 1000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.issued_copies", body.IssuedCopies, 1000, false))
		}
		if body.ImageID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.image_id", body.ImageID, 1, true))
		}
		if body.YoutubeURL != nil {
			if utf8.RuneCountInString(*body.YoutubeURL) > 128 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.youtube_url", *body.YoutubeURL, utf8.RuneCountInString(*body.YoutubeURL), 128, false))
			}
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("body.artist_pastelid", body.ArtistPastelID, "^[a-zA-Z0-9]+$"))
		if utf8.RuneCountInString(body.ArtistPastelID) < 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.artist_pastelid", body.ArtistPastelID, utf8.RuneCountInString(body.ArtistPastelID), 86, true))
		}
		if utf8.RuneCountInString(body.ArtistPastelID) > 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.artist_pastelid", body.ArtistPastelID, utf8.RuneCountInString(body.ArtistPastelID), 86, false))
		}
		if utf8.RuneCountInString(body.ArtistName) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.artist_name", body.ArtistName, utf8.RuneCountInString(body.ArtistName), 256, false))
		}
		if body.ArtistWebsiteURL != nil {
			if utf8.RuneCountInString(*body.ArtistWebsiteURL) > 256 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.artist_website_url", *body.ArtistWebsiteURL, utf8.RuneCountInString(*body.ArtistWebsiteURL), 256, false))
			}
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("body.spendable_address", body.SpendableAddress, "^[a-zA-Z0-9]+$"))
		if utf8.RuneCountInString(body.SpendableAddress) < 35 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.spendable_address", body.SpendableAddress, utf8.RuneCountInString(body.SpendableAddress), 35, true))
		}
		if utf8.RuneCountInString(body.SpendableAddress) > 35 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.spendable_address", body.SpendableAddress, utf8.RuneCountInString(body.SpendableAddress), 35, false))
		}
		if body.NetworkFee < 1e-05 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.network_fee", body.NetworkFee, 1e-05, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &artworks.RegisterPayload{
		Name:             body.Name,
		Description:      body.Description,
		Keywords:         body.Keywords,
		SeriesName:       body.SeriesName,
		IssuedCopies:     body.IssuedCopies,
		ImageID:          body.ImageID,
		YoutubeURL:       body.YoutubeURL,
		ArtistPastelID:   body.ArtistPastelID,
		ArtistName:       body.ArtistName,
		ArtistWebsiteURL: body.ArtistWebsiteURL,
		SpendableAddress: body.SpendableAddress,
		NetworkFee:       body.NetworkFee,
	}

	return v, nil
}

// BuildRegisterTaskStatePayload builds the payload for the artworks
// registerTaskState endpoint from CLI flags.
func BuildRegisterTaskStatePayload(artworksRegisterTaskStateTaskID string) (*artworks.RegisterTaskStatePayload, error) {
	var err error
	var taskID int
	{
		var v int64
		v, err = strconv.ParseInt(artworksRegisterTaskStateTaskID, 10, 64)
		taskID = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for taskID, must be INT")
		}
		if taskID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("taskID", taskID, 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &artworks.RegisterTaskStatePayload{}
	v.TaskID = taskID

	return v, nil
}

// BuildRegisterTaskPayload builds the payload for the artworks registerTask
// endpoint from CLI flags.
func BuildRegisterTaskPayload(artworksRegisterTaskTaskID string) (*artworks.RegisterTaskPayload, error) {
	var err error
	var taskID int
	{
		var v int64
		v, err = strconv.ParseInt(artworksRegisterTaskTaskID, 10, 64)
		taskID = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for taskID, must be INT")
		}
		if taskID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("taskID", taskID, 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &artworks.RegisterTaskPayload{}
	v.TaskID = taskID

	return v, nil
}

// BuildUploadImagePayload builds the payload for the artworks uploadImage
// endpoint from CLI flags.
func BuildUploadImagePayload(artworksUploadImageBody string) (*artworks.UploadImagePayload, error) {
	var err error
	var body UploadImageRequestBody
	{
		err = json.Unmarshal([]byte(artworksUploadImageBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"file\": \"VmVsIHZvbHVwdGF0ZW0gcHJvdmlkZW50IGRvbG9yaWJ1cy4=\"\n   }'")
		}
		if body.Bytes == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("file", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &artworks.UploadImagePayload{
		Bytes: body.Bytes,
	}

	return v, nil
}
