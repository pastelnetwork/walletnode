// Code generated by goa v3.3.1, DO NOT EDIT.
//
// artworks HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/pastelnetwork/walletnode/api/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"mime/multipart"
	"net/http"
	"net/url"

	artworks "github.com/pastelnetwork/walletnode/api/gen/artworks"
	artworksviews "github.com/pastelnetwork/walletnode/api/gen/artworks/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildRegisterRequest instantiates a HTTP request object with method and path
// set to call the "artworks" service "register" endpoint
func (c *Client) BuildRegisterRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RegisterArtworksPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("artworks", "register", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRegisterRequest returns an encoder for requests sent to the artworks
// register server.
func EncodeRegisterRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*artworks.RegisterPayload)
		if !ok {
			return goahttp.ErrInvalidType("artworks", "register", "*artworks.RegisterPayload", v)
		}
		body := NewRegisterRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("artworks", "register", err)
		}
		return nil
	}
}

// DecodeRegisterResponse returns a decoder for responses returned by the
// artworks register endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeRegisterResponse may return the following errors:
//	- "BadRequest" (type *goa.ServiceError): http.StatusBadRequest
//	- "InternalServerError" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeRegisterResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body RegisterResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("artworks", "register", err)
			}
			p := NewRegisterResultViewCreated(&body)
			view := "default"
			vres := &artworksviews.RegisterResult{Projected: p, View: view}
			if err = artworksviews.ValidateRegisterResult(vres); err != nil {
				return nil, goahttp.ErrValidationError("artworks", "register", err)
			}
			res := artworks.NewRegisterResult(vres)
			return res, nil
		case http.StatusBadRequest:
			var (
				body RegisterBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("artworks", "register", err)
			}
			err = ValidateRegisterBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("artworks", "register", err)
			}
			return nil, NewRegisterBadRequest(&body)
		case http.StatusInternalServerError:
			var (
				body RegisterInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("artworks", "register", err)
			}
			err = ValidateRegisterInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("artworks", "register", err)
			}
			return nil, NewRegisterInternalServerError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("artworks", "register", resp.StatusCode, string(body))
		}
	}
}

// BuildRegisterStatusRequest instantiates a HTTP request object with method
// and path set to call the "artworks" service "registerStatus" endpoint
func (c *Client) BuildRegisterStatusRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		jobID int
	)
	{
		p, ok := v.(*artworks.RegisterStatusPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("artworks", "registerStatus", "*artworks.RegisterStatusPayload", v)
		}
		jobID = p.JobID
	}
	scheme := c.scheme
	switch c.scheme {
	case "http":
		scheme = "ws"
	case "https":
		scheme = "wss"
	}
	u := &url.URL{Scheme: scheme, Host: c.host, Path: RegisterStatusArtworksPath(jobID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("artworks", "registerStatus", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeRegisterStatusResponse returns a decoder for responses returned by the
// artworks registerStatus endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeRegisterStatusResponse may return the following errors:
//	- "NotFound" (type *goa.ServiceError): http.StatusNotFound
//	- "BadRequest" (type *goa.ServiceError): http.StatusBadRequest
//	- "InternalServerError" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeRegisterStatusResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body RegisterStatusResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("artworks", "registerStatus", err)
			}
			p := NewRegisterStatusJobOK(&body)
			view := "default"
			vres := &artworksviews.Job{Projected: p, View: view}
			if err = artworksviews.ValidateJob(vres); err != nil {
				return nil, goahttp.ErrValidationError("artworks", "registerStatus", err)
			}
			res := artworks.NewJob(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body RegisterStatusNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("artworks", "registerStatus", err)
			}
			err = ValidateRegisterStatusNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("artworks", "registerStatus", err)
			}
			return nil, NewRegisterStatusNotFound(&body)
		case http.StatusBadRequest:
			var (
				body RegisterStatusBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("artworks", "registerStatus", err)
			}
			err = ValidateRegisterStatusBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("artworks", "registerStatus", err)
			}
			return nil, NewRegisterStatusBadRequest(&body)
		case http.StatusInternalServerError:
			var (
				body RegisterStatusInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("artworks", "registerStatus", err)
			}
			err = ValidateRegisterStatusInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("artworks", "registerStatus", err)
			}
			return nil, NewRegisterStatusInternalServerError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("artworks", "registerStatus", resp.StatusCode, string(body))
		}
	}
}

// BuildUploadImageRequest instantiates a HTTP request object with method and
// path set to call the "artworks" service "uploadImage" endpoint
func (c *Client) BuildUploadImageRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UploadImageArtworksPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("artworks", "uploadImage", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUploadImageRequest returns an encoder for requests sent to the
// artworks uploadImage server.
func EncodeUploadImageRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*artworks.UploadImagePayload)
		if !ok {
			return goahttp.ErrInvalidType("artworks", "uploadImage", "*artworks.UploadImagePayload", v)
		}
		if err := encoder(req).Encode(p); err != nil {
			return goahttp.ErrEncodingError("artworks", "uploadImage", err)
		}
		return nil
	}
}

// NewArtworksUploadImageEncoder returns an encoder to encode the multipart
// request for the "artworks" service "uploadImage" endpoint.
func NewArtworksUploadImageEncoder(encoderFn ArtworksUploadImageEncoderFunc) func(r *http.Request) goahttp.Encoder {
	return func(r *http.Request) goahttp.Encoder {
		body := &bytes.Buffer{}
		mw := multipart.NewWriter(body)
		return goahttp.EncodingFunc(func(v interface{}) error {
			p := v.(*artworks.UploadImagePayload)
			if err := encoderFn(mw, p); err != nil {
				return err
			}
			r.Body = ioutil.NopCloser(body)
			r.Header.Set("Content-Type", mw.FormDataContentType())
			return mw.Close()
		})
	}
}

// DecodeUploadImageResponse returns a decoder for responses returned by the
// artworks uploadImage endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeUploadImageResponse may return the following errors:
//	- "BadRequest" (type *goa.ServiceError): http.StatusBadRequest
//	- "InternalServerError" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeUploadImageResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body UploadImageResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("artworks", "uploadImage", err)
			}
			p := NewUploadImageImageCreated(&body)
			view := "default"
			vres := &artworksviews.Image{Projected: p, View: view}
			if err = artworksviews.ValidateImage(vres); err != nil {
				return nil, goahttp.ErrValidationError("artworks", "uploadImage", err)
			}
			res := artworks.NewImage(vres)
			return res, nil
		case http.StatusBadRequest:
			var (
				body UploadImageBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("artworks", "uploadImage", err)
			}
			err = ValidateUploadImageBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("artworks", "uploadImage", err)
			}
			return nil, NewUploadImageBadRequest(&body)
		case http.StatusInternalServerError:
			var (
				body UploadImageInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("artworks", "uploadImage", err)
			}
			err = ValidateUploadImageInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("artworks", "uploadImage", err)
			}
			return nil, NewUploadImageInternalServerError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("artworks", "uploadImage", resp.StatusCode, string(body))
		}
	}
}
