// Code generated by goa v3.3.1, DO NOT EDIT.
//
// artworks endpoints
//
// Command:
// $ goa gen github.com/pastelnetwork/walletnode/api/design

package artworks

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "artworks" service endpoints.
type Endpoints struct {
	Register       goa.Endpoint
	RegisterStatus goa.Endpoint
	UploadImage    goa.Endpoint
}

// RegisterStatusEndpointInput holds both the payload and the server stream of
// the "registerStatus" method.
type RegisterStatusEndpointInput struct {
	// Payload is the method payload.
	Payload *RegisterStatusPayload
	// Stream is the server stream used by the "registerStatus" method to send data.
	Stream RegisterStatusServerStream
}

// NewEndpoints wraps the methods of the "artworks" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Register:       NewRegisterEndpoint(s),
		RegisterStatus: NewRegisterStatusEndpoint(s),
		UploadImage:    NewUploadImageEndpoint(s),
	}
}

// Use applies the given middleware to all the "artworks" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Register = m(e.Register)
	e.RegisterStatus = m(e.RegisterStatus)
	e.UploadImage = m(e.UploadImage)
}

// NewRegisterEndpoint returns an endpoint function that calls the method
// "register" of service "artworks".
func NewRegisterEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*RegisterPayload)
		res, err := s.Register(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedRegisterResult(res, "default")
		return vres, nil
	}
}

// NewRegisterStatusEndpoint returns an endpoint function that calls the method
// "registerStatus" of service "artworks".
func NewRegisterStatusEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		ep := req.(*RegisterStatusEndpointInput)
		return nil, s.RegisterStatus(ctx, ep.Payload, ep.Stream)
	}
}

// NewUploadImageEndpoint returns an endpoint function that calls the method
// "uploadImage" of service "artworks".
func NewUploadImageEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*UploadImagePayload)
		res, err := s.UploadImage(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedImage(res, "default")
		return vres, nil
	}
}
